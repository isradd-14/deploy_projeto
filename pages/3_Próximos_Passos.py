import streamlit as st
import pandas as pd

# üß≠ Configura√ß√µes da p√°gina
st.set_page_config(page_title="Pr√≥ximos passos", layout="wide")

# üìò Header com logo e t√≠tulo
logo_path = "hp_logo3.svg"
col1, col2, col3 = st.columns([0.6, 0.5, 0.25])
with col2:
    st.image(str(logo_path), width=120) 
st.markdown("""
    <div style="text-align:center;">
        <h1 style="color:white;">Pr√≥ximos passos</h1>
    </div>
""", unsafe_allow_html=True)

import streamlit as st

def task_card(title, description, owner=None, priority="M√©dia", done=False):
    cols = st.columns([8, 1, 1])
    with cols[0]:
        st.markdown(f"### {title}")
        st.write(description)
        if owner:
            st.caption(f"Respons√°vel: **{owner}**  ‚Ä¢ Prioridade: **{priority}**")
    with cols[1]:
        st.checkbox("Conclu√≠do", value=done, key=f"chk_{title}")

st.markdown("---")

# Overview em uma linha
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("Backlog", "4 itens")
with col2:
    st.metric("Prioridade Alta", "2")
with col3:
    st.metric("Em Progresso", "1")

st.markdown("## Roadmap & A√ß√µes recomendadas")
st.info("Observa√ß√£o: para captura de coment√°rios e scraping, priorizar APIs oficiais e conformidade legal. Evitar burlar mecanismos anti-bot.")

# Task 1
task_card(
    "Capturar coment√°rios e an√°lise de sentimento",
    """
    - Coletar reviews para enriquecer features (sentimento, t√≥picos, entidades).
    - Preferir APIs oficiais; se for scraping, seguir robots.txt, rate limits e consultar jur√≠dico.
    - Ferramentas: Playwright (quando permitido), APIs, modelos transformer para sentiment/NER.
    """,
    owner="ValidAI & HP",
    priority="Alta",
    done=False
)

st.markdown("---")

task_card(
    "Integra√ß√£o de coleta de dados com interface visual",
    """
    - Integrar a camada de coleta de dados (web scraping ou APIs) com a interface visual, garantindo que a HP tenha total controle e autonomia sobre o processo
    """,
    owner="ValidAI",
    priority="Alta",
    done=False
)

st.markdown("---")

# Task 2
task_card(
    "Expandir gama de produtos (al√©m do 667)",
    """
    - Automatizar ETL e valida√ß√£o.
    - Ferramentas: Prefect/Airflow.
    """,
    owner="ValidAI",
    priority="Alta",
    done=False
)

st.markdown("---")

# Task 3
task_card(
    "Expandir marketplaces (Shopee, Temu, Magalu, etc.)",
    """
    - Priorizar marketplaces com APIs p√∫blicas.
    - Padronizar schema de ingest√£o (price, sold, seller_id, url, rating).
    """,
    owner="ValidAI",
    priority="M√©dia",
    done=False
)

st.markdown("---")

# Task 4
task_card(
    "Criar 'carrinho' via site para facilitar compra de produtos suspeitos",
    """
    - Flow: identificar -> adicionar ao carrinho -> redirecionamento URLs -> compra Mktplace
    - Arquitetura sugerida: FastAPI backend + front em React/Streamlit.
    """,
    owner="ValidAI",
    priority="M√©dia",
    done=False
)

st.markdown("---")

# Task 4
task_card(
    "Criar an√°lises gr√°ficas mais robustas",
    """
    - Desenvolver dashboards mensais detalhados com m√©tricas como: faturamento dos maiores infratores, quantidade de produtos piratas, evolu√ß√£o temporal e comparativos entre categorias ou sellers.
    - Arquitetura sugerida: frontend em React ou Streamlit, integrando visualiza√ß√µes interativas com Plotly/Chart.js para explora√ß√£o din√¢mica dos dados.
    """,
    owner="ValidAI",
    priority="M√©dia",
    done=False
)
